# Formatting species data
# obtaining dataframe listing the Open Tree identifiers potentially
# matching our list of species.
taxa <- tnrs_match_names(species)
# according to the `approximate_match` column, there might be
# 0 typos in the species list
taxa[taxa$approximate_match==TRUE,] # no species returned
# exploring which species return more than one match, and the
# reasons to make sure we retrieve the correct data.
taxa[taxa$number_matches != 1,]
ott_id_tocheck <- taxa[taxa$number_matches != 1,"ott_id"]
for(i in 1:length(ott_id_tocheck)){
print(inspect(taxa, ott_id = ott_id_tocheck[i]))
}
# check synonyms and change name accordingly
fix_taxa <- taxa[taxa$is_synonym==TRUE,] # 0 species returned
# retrieving phylogenetic relationships among taxa in the form
# of a trimmed sub-tree
tree <- tol_induced_subtree(ott_ids = taxa[["ott_id"]], label_format = "name")
plot(tree, cex=.5, label.offset =.1, no.margin = TRUE)
# Dealing with polytomies
# we run the following function to check for the existence of polytomies.
# If polytomies exist, the output will be `FALSE`, and vice versa.
is.binary(tree) # there are some polytomies
# to take care of these polytomies, we are going to use a
# randomization approach
set.seed(111) #making it replicable, at least for this version of R (i.e. v.4.0.2)
tree_random <- multi2di(tree,random=TRUE)
is.binary(tree_random)
# Final checks
# exploring whether our tree covers all the species we wanted
# it to include, and making sure that the species names in our
# database match those in the tree. We use the following code.
tree_random$tip.label <- gsub("_"," ", tree_random$tip.label)
intersect(as.character(tree_random$tip.label), as.character(species))
species[!species %in% as.character(tree_random$tip.label)] #listed in our database but not in the tree
tree_random$tip.label[!as.character(tree_random$tip.label) %in% species] # listed in the tree but not in our database
tiff("Results/Temporal/Temporal_pairwiseFAL_BM_phylogenetic_tree_pruned.tiff",
height=20, width=10,
units='cm', compression="lzw", res=800)
plot(tree_random, cex=.5, label.offset =.1, no.margin = TRUE)
dev.off()
# we can now save the tree
save(tree_random, file = "Results/Temporal/Temporal_pairwiseFAL_BM_tree_random.Rdata")
# Computing branch lengths
# we are computing branch lengths for our tree following
# Grafen (1989)(https://royalsocietypublishing.org/doi/abs/10.1098/rstb.1989.0106)
# before we need to make sure that tree labels and database
# use the same nomenclature
setdiff(data$speciesname, as.character(tree_random$tip.label)) # Null
setdiff(as.character(tree_random$tip.label),data$Bat_species)# 0
# exclude species in the tree that are not in dataset
drops <- tree_random$tip.label[!tree_random$tip.label %in% data$Bat_species]
tree_random.fixed <- drop.tip(tree_random, drops)
# save the new tree
write.tree(tree_random.fixed, file = "Results/Temporal/Temporal_pairwiseFAL_BM_tree_random_fixed.tre")
# compute branch lengths of tree
phylo_branch <- compute.brlen(tree_random.fixed, method = "Grafen", power = 1)
# check if tree is ultrametric
is.ultrametric(phylo_branch) # TRUE
# Phylogenetic matrix
# matrix to be included in the models
bat_phylo_cor <- vcv(phylo_branch, cor = T)
# remove rows not in correlation matrix
data_ph <- data[which(data$Bat_species %in% rownames(bat_phylo_cor)),]
##create Species ID to distinguish later between variation explained by non-phylogenetic and phylogenetic effects
SpID <- data.frame(Bat_species = unique(data_ph$Bat_species), SPID = paste0("SP",1:length(unique(data_ph$Bat_species))))
SpID$Bat_species <- as.character(SpID$Bat_species)
data_ph <- inner_join(data_ph,SpID, by = "Bat_species")
# finally, save matrix for future analyses
save(bat_phylo_cor, file = "Results/Temporal/Temporal_pairwiseFAL_BM_bat_phylo_cor.Rdata")
# exporting fixed dataset for analyses
write.csv(data_ph,
"Data/Temporal/pairwiseFAL_BM_ph.csv", row.names = FALSE)
# exporting species list
write.csv(species, "Results/Temporal/Temporal_pairwiseFAL_BM_species_list.csv")
# This script is used to run the phylogenetic meta-analysis
# based on the Spearman correlations between the environmental variable (year)
# and bats body size measurements (FAL and BM) for both "FAL" and "Pairwise FAL-BM" datasets
# load libraries
library(metafor)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(readxl)
library(mapview)
library(sf)
library(raster)
# Clear environment
rm(list=ls())
# From now on, the analysis is divided based on the dataset used:
#----------------------
## FAL dataset
#----------------------
#load data
data <- read.csv("Data/Temporal/FAL_ph.csv", stringsAsFactors = F)
head(data)
# loading phylogenetic matrixes
load("Results/Temporal/Temporal_FAL_bat_phylo_cor.Rdata") #bat_phylo_cor
# define phylo vcov matrix and random effects
phylocor <- list(Bat_species = bat_phylo_cor)
RE = list( ~1|Bat_species, ~1|SPID)
# Phylogenetic meta-analyses
# Run phylogenetic meta-analysis based on Spearman Correlations
m1 <- rma.mv(yi_s, vi_s, data = data, random = RE, R = phylocor)
summary(m1)
m1Y <- data.frame(ES=as.numeric(m1$b), CIL=as.numeric(m1$ci.lb), CUL=as.numeric(m1$ci.ub), Variable = "Year")
round(transf.ztor(m1$beta) , digits=3) # estimate
round(transf.ztor(m1$ci.lb), digits=3) # ci lower
round(transf.ztor(m1$ci.ub), digits=3) # ci upper
round(m1$pval, digits=3) #pval
round(m1$QE, digits=1) # QE
m1$QEp # pval for QE
write.csv(m1Y, "Results/Temporal/Temporal_FAL_meta-analysis.csv", row.names = FALSE)
rm(list = c("m1", "m1Y"))
#--------------------------
## Pairwise FAL-BM dataset
#--------------------------
#load data
data <- read.csv("Data/Temporal/pairwiseFAL_BM_ph.csv", stringsAsFactors = F)
head(data)
# loading phylogenetic matrixes
load("Results/Temporal/Temporal_pairwiseFAL_BM_bat_phylo_cor.Rdata") #bat_phylo_cor
# define phylo vcov matrix and random effects
phylocor <- list(Bat_species = bat_phylo_cor)
RE = list( ~1|Bat_species, ~1|SPID)
# Phylogenetic meta-analyses
# Run phylogenetic meta-analysis based on Spearman Correlations
#FAL
m2 <- rma.mv(yi_s_FAL, vi_s, data = data, random = RE, R = phylocor)
summary(m2)
m2Y <- data.frame(ES=as.numeric(m2$b), CIL=as.numeric(m2$ci.lb), CUL=as.numeric(m2$ci.ub), Variable = "Year")
round(transf.ztor(m2$beta) , digits=3) # estimate
round(transf.ztor(m2$ci.lb), digits=3) # ci lower
round(transf.ztor(m2$ci.ub), digits=3) # ci upper
round(m2$pval, digits=3) #pval
round(m2$QE, digits=1) # QE
m2$QEp # pval for QE
write.csv(m2Y, "Results/Temporal/Temporal_pairwiseFAL_BM_meta-analysis_FAL.csv", row.names = FALSE)
rm(list = c("m2", "m2Y"))
#BM
m3 <- rma.mv(yi_s_BM, vi_s, data = data, random = RE, R = phylocor)
summary(m3)
m3Y <- data.frame(ES=as.numeric(m3$b), CIL=as.numeric(m3$ci.lb), CUL=as.numeric(m3$ci.ub), Variable = "Year")
round(transf.ztor(m3$beta) , digits=3) # estimate
round(transf.ztor(m3$ci.lb), digits=3) # ci lower
round(transf.ztor(m3$ci.ub), digits=3) # ci upper
round(m3$pval, digits=3) #pval
round(m3$QE, digits=1) # QE
m3$QEp # pval for QE
write.csv(m3Y, "Results/Temporal/Temporal_pairwiseFAL_BM_meta-analysis_BM.csv", row.names = FALSE)
rm(list = c("m3", "m3Y"))
# This script is used to run the phylogenetic meta-regression
# between the Spearman correlations and the species-level body sizes
# for both "FAL" and "Pairwise FAL-BM" datasets
# load libraries
library(metafor)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(readxl)
library(mapview)
library(sf)
library(raster)
# Clear environment
rm(list=ls())
# From now on, the analysis is divided based on the dataset used:
#----------------------
## FAL dataset
#----------------------
#load data
data <- read.csv("Data/Temporal/FAL_ph.csv", stringsAsFactors = F)
head(data)
# loading phylogenetic matrixes
load("Results/Temporal/Temporal_FAL_bat_phylo_cor.Rdata") #bat_phylo_cor
# define phylo vcov matrix and random effects
phylocor <- list(Bat_species = bat_phylo_cor)
RE = list( ~1|Bat_species, ~1|SPID)
## Tmax
# effect of size
#males
em1 <- rma.mv(yi_s ~ log10(fal), vi_s, data = data, random = RE, R = phylocor)
summary(em1)
temp <- log10(seq(from = min(data$fal), to = max(data$fal), length.out = 1000))
em1_Y <- predict(em1, newmods = cbind(temp), addx=TRUE)
em1_Y <- data.frame(em1_Y)
em1_Y$temp <- em1_Y$X.temp
em1_Y$cor <- transf.ztor(em1_Y$pred)
em1_Y$cor_ci.lb <- transf.ztor(em1_Y$ci.lb)
em1_Y$cor_ci.ub <- transf.ztor(em1_Y$ci.ub)
write.csv(em1_Y, "Results/Temporal/Temporal_FAL_meta-regression.csv", row.names = FALSE)
#--------------------------
## Pairwise FAL-BM dataset
#--------------------------
rm(list=ls())
#load data
data <- read.csv("Data/Temporal/pairwiseFAL_BM_ph.csv", stringsAsFactors = F)
head(data)
# loading phylogenetic matrixes
load("Results/Temporal/Temporal_pairwiseFAL_BM_bat_phylo_cor.Rdata") #bat_phylo_cor
# define phylo vcov matrix and random effects
phylocor <- list(Bat_species = bat_phylo_cor)
RE = list( ~1|Bat_species, ~1|SPID)
# effect of size
#FAL
em1 <- rma.mv(yi_s_FAL ~ log10(fal), vi_s, data = data, random = RE, R = phylocor)
summary(em1)
temp <- log10(seq(from = min(data$fal), to = max(data$fal), length.out = 1000))
em1_Y_FAL <- predict(em1, newmods = cbind(temp), addx=TRUE)
em1_Y_FAL <- data.frame(em1_Y_FAL)
em1_Y_FAL$temp <- em1_Y_FAL$X.temp
em1_Y_FAL$cor <- transf.ztor(em1_Y_FAL$pred)
em1_Y_FAL$cor_ci.lb <- transf.ztor(em1_Y_FAL$ci.lb)
em1_Y_FAL$cor_ci.ub <- transf.ztor(em1_Y_FAL$ci.ub)
write.csv(em1_Y_FAL, "Results/Temporal/Temporal_pairwiseFAL_BM_meta-regression_FAL.csv", row.names = FALSE)
#BM
em1 <- rma.mv(yi_s_BM ~ log10(bm), vi_s, data = data, random = RE, R = phylocor)
summary(em1)
temp <- log10(seq(from = min(data$bm), to = max(data$bm), length.out = 1000))
em1_Y_BM <- predict(em1, newmods = cbind(temp), addx=TRUE)
em1_Y_BM <- data.frame(em1_Y_BM)
em1_Y_BM$temp <- em1_Y_BM$X.temp
em1_Y_BM$cor <- transf.ztor(em1_Y_BM$pred)
em1_Y_BM$cor_ci.lb <- transf.ztor(em1_Y_BM$ci.lb)
em1_Y_BM$cor_ci.ub <- transf.ztor(em1_Y_BM$ci.ub)
write.csv(em1_Y_BM, "Results/Temporal/Temporal_pairwiseFAL_BM_meta-regression_BM.csv", row.names = FALSE)
# load libraries
library(metafor)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(readxl)
library(readr)
# Clear environment
rm(list=ls())
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
##  ~ Meta regression------------------
##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#----------------------
## FAL dataset
#----------------------
# Clear environment
rm(list=ls())
# This script generates the figures related to the meta-regression analysis.
# Load the dataset
data_m <- read.csv("Data/Temporal/FAL_ph.csv")
# Load the meta-regression results for males.
df_m <- read.csv("Results/Temporal/Temporal_FAL_meta-regression.csv")
# Create a sequence of log-transformed forearm lengths for plotting the regression line.
temp <- log10(seq(from = min(data_m$fal), to = max(data_m$fal), length.out = 1000))
# Calculate the size of points based on the inverse of the square root of the sampling variance,
# which adjusts the point size to reflect the precision of each data point.
wi <- 1/sqrt(data_m$vi)
size <- 2 + 20.0 * (wi - min(wi))/(max(wi) - min(wi))
# Set up the range for the x-axis with a small padding.
x_range <- range(log10(data_m$fal))
x_padding <- 0.02
# Generate the plot for males.
M <- ggplot() +
geom_hline(yintercept= 0, size=1.2, linetype="dashed", color="dark gray") +
geom_line(data = df_m, aes(temp, cor), color="grey30", size = .6) +
geom_point(data_m, mapping = aes(x = log10(fal), y = r), fill = "#68B1C9", color='black',
shape=21, size = size * 0.7, alpha = .8) +
scale_size(range=c(2, 10))+
theme_bw(base_size=18) +
geom_ribbon(data = df_m, aes(x = temp, ymin = cor_ci.lb, ymax = cor_ci.ub), fill = "grey20", alpha = .1) +
xlab("log10(forearm length (mm))") +
ylab("Spearman r (FAL-year)") +
ggtitle("FAL") +
theme(legend.position='none',
axis.text = element_text(size = 10),        # Match axis text size
axis.title = element_text(size = 11),       # Match axis label size
plot.title = element_text(size = 13)) +
scale_x_continuous(limits = c(min(x_range) - x_padding, max(x_range) + x_padding)) +
scale_y_continuous(breaks = seq(-1.0,1.0,0.2), limits= c(-1.0,1.0))
# Display the plot for males.
M
#--------------------------
## Pairwise FAL-BM dataset
#--------------------------
# The following sections repeat the same analysis for subsets of the FAL data and for body mass.
# FAL
data_mfa <- read.csv("Data/Temporal/pairwiseFAL_BM_ph.csv")
df_mfa <- read.csv("Results/Temporal/Temporal_pairwiseFAL_BM_meta-regression_FAL.csv")
tempfa <- log10(seq(from = min(data_mfa$fal), to = max(data_mfa$fal), length.out = 1000))
wifa <- 1/sqrt(data_mfa$vi)
sizefa <- 2 + 20.0 * (wifa - min(wifa))/(max(wifa) - min(wifa))
x_range <- range(log10(data_mfa$fal))
x_padding <- 0.02
Mfa <- ggplot() +
geom_hline(yintercept= 0, size=1.2, linetype="dashed", color="dark gray") +
geom_line(data = df_mfa, aes(tempfa, cor), color="grey30", size = .6) +
geom_point(data_mfa, mapping = aes(x = log10(fal), y = r_FAL), fill = "#68B1C9", color='black',
shape=21, size = sizefa * 0.7, alpha = .8) +
scale_size(range=c(2, 10)) +
theme_bw(base_size=18) +
geom_ribbon(data = df_mfa, aes(x = tempfa, ymin = cor_ci.lb, ymax = cor_ci.ub), fill = "grey20", alpha = .1) +
xlab("log10(forearm length (mm))") +
ylab("Spearman r (FAL-year)") +
ggtitle("Subset FAL") +
theme(legend.position='none',
axis.text = element_text(size = 10),        # Match axis text size
axis.title = element_text(size = 11),       # Match axis label size
plot.title = element_text(size = 13)) +
scale_x_continuous(limits = c(min(x_range) - x_padding, max(x_range) + x_padding)) +
scale_y_continuous(breaks = seq(-1.0,1.0,0.2), limits= c(-1.0,1.0))
Mfa
# BM
data_bm <- read.csv("Data/Temporal/pairwiseFAL_BM_ph.csv")
df_bm <- read.csv("Results/Temporal/Temporal_pairwiseFAL_BM_meta-regression_BM.csv")
tempbm <- log10(seq(from = min(data_bm$bm), to = max(data_bm$bm), length.out = 1000))
wibm <- 1/sqrt(data_bm$vi)
sizebm <- 2 + 20.0 * (wibm - min(wibm))/(max(wibm) - min(wibm))
x_range <- range(log10(data_bm$bm))
x_padding <- 0.02
Mbm <- ggplot() +
geom_hline(yintercept= 0, size=1.2, linetype="dashed", color="dark gray") +
geom_line(data = df_bm, aes(tempbm, cor), color="grey30", size = .6) +
geom_point(data_bm, mapping = aes(x = log10(bm), y = r_BM), fill = "#68B1C9", color='black',
shape=21, size = sizebm * 0.7, alpha = .8) +
scale_size(range=c(2, 10)) +
theme_bw(base_size=18) +
geom_ribbon(data = df_bm, aes(x = tempbm, ymin = cor_ci.lb, ymax = cor_ci.ub), fill = "grey20", alpha = .1) +
xlab("log10(body mass (g))") +
ylab("Spearman r (BM-year)") +
ggtitle("Subset BM") +
theme(legend.position='none',
axis.text = element_text(size = 10),        # Match axis text size
axis.title = element_text(size = 11),       # Match axis label size
plot.title = element_text(size = 13)) +
scale_x_continuous(limits = c(min(x_range) - x_padding, max(x_range) + x_padding)) +
scale_y_continuous(breaks = seq(-1.0,1.0,0.2), limits= c(-1.0,1.0))
Mbm
## Final image (Figure 4) ----
final <- ggarrange(M, Mfa, Mbm, ncol = 3, nrow = 1, align = "h", labels = c("a", "b", "c"))
final
# ggsave(filename='Figures/Figure_4.png',
#        width = 430, height = 150, units = 'mm', dpi = 900)
ggsave(filename='Figures/Figure_4.pdf',
width = 300, height = 100, units = 'mm', dpi = 900)
#library
library(sf)
library(ggpubr)
library(sf)
library(here)
library(dplyr)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
library(magrittr)
library(paletteer)
library(scales)
library(RColorBrewer)
# Clear environment
rm(list=ls())
#----------------------
## Spatial Data
#----------------------
b_S2 <- read.csv("Data/Spatial/FAL_data.csv")
# Calculate "n", the number of cells where each species is present
aa <-  b_S2 %>%
group_by(Bat_species) %>%
dplyr::summarise(n1 = length(unique(cell_id)))
# Join aa with the b_S dataset to include coordinate variables
b_S3 <- left_join(b_S2, aa, by = c("Bat_species"))
b_S3 <-  b_S3 %>%
group_by(Bat_species, n1, Lat_c, Long_c)%>%
dplyr::summarise(n = n())
## Get world polygon for background
world <- ne_countries(scale = "medium", returnclass = "sf")
# Plot the map
map.color_S <- ggplot(data = world) +
theme(plot.margin = unit(c(0.2, 2, 0.2, 0), 'lines'))+
geom_sf(fill = "white") +
coord_sf(xlim = c(-15, 45),
ylim = c(27,65 ),
expand = FALSE) +
geom_point(data = b_S3, aes(x = Long_c, y = Lat_c,
fill = Bat_species),
size = 2.5, shape = 21, color = "gray50",  stroke = 0.3) +
scale_fill_manual(values = alpha(c("#6FB7A7", "#ABD2CB", "#D2E6CD", "#C3E1A8", "#B8D28C",
"#F0F0BF", "#EBD89F", "#EEC9AD", "#E4B888", "#E49A91",
"#EFAFAF", "#D8B2C4", "#BD98BD", "#C6C4D8", "#ADA8D9",
"#A1C3D9", "#B4CDD9", "#B6AFA4", "#D2D2D2"),0.7))+
xlab("") +
ylab("") +
theme_bw()
## Display map
map.color_S <- map.color_S +
theme(legend.position = "none")
map.color_S <-  map.color_S+
theme(legend.text = element_text(size = 8)
)+
guides(color = guide_legend(override.aes = list(size = 1.2), nrow = 3))
map.color_S <-  map.color_S + theme(axis.text.y = element_text(size = 8),
axis.title.y = element_blank()) +
theme(axis.text.x = element_text(size = 8))
# Create the bar plot
bar_plot_S <- ggplot(aa) +
geom_bar(aes(x = n1, y = factor(Bat_species, levels = rev(levels(factor(Bat_species)))),
fill = Bat_species), colour = "black",
stat = "identity", alpha = 0.7, linewidth = 0.35,
position = position_dodge(width = 0.9))+
scale_fill_manual(values = c("#6FB7A7", "#ABD2CB", "#D2E6CD", "#C3E1A8", "#B8D28C",
"#F0F0BF", "#EBD89F", "#EEC9AD", "#E4B888", "#E49A91",
"#EFAFAF", "#D8B2C4", "#BD98BD", "#C6C4D8", "#ADA8D9",
"#A1C3D9", "#B4CDD9", "#B6AFA4", "#D2D2D2"))+
theme_bw() +
scale_x_continuous(breaks = seq(0, 700, by = 50))
bar_plot_S <- bar_plot_S +
guides(fill = "none")
bar_plot_S <-  bar_plot_S + theme(axis.text.y = element_text(size = 12, face = "bold.italic"),
axis.title.y = element_blank()) +
theme(axis.text.x = element_text(size = ))+
theme(plot.margin = unit(c(0.2, 0, 0.2, 2), 'lines'))+
labs(x ="n cells")+
ggtitle("Spatial")+
theme(plot.title = element_text(size = 20, face = "bold"))
#----------------------
## Temporal Data
#----------------------
b_T <- read.csv("Data/Temporal/FAL_data.csv")
# Calculate "n", the number of years where each species is present
aa <-  b_T %>%
group_by(Bat_species) %>%
dplyr::summarise(n1 = length(unique(Year)))
# Join aa with the b_T dataset to include coordinate variables
n2_T <- left_join(b_T, aa, by = c("Bat_species"))
n2_T <-  n2_T %>%
group_by(Bat_species, cell_id, n1, Lat_c, Long_c)%>%
dplyr::summarise(n = n())
## Get world polygon for background
world <- ne_countries(scale = "medium", returnclass = "sf")
nb.cols <- 12
mycolors <- colorRampPalette(brewer.pal(12, "Set3"))(nb.cols)
map.color_T <- ggplot(data = world) +
theme(plot.margin = unit(c(0.2, 4, 0.2, 0), 'lines'))+
geom_sf(fill = "white") +
coord_sf(xlim = c(-15, 45),
ylim = c(27,65 ),
expand = F) +
geom_point(data = n2_T, aes(x = Long_c, y = Lat_c,
fill = Bat_species),
size = 2.5, alpha = 0.7, shape = 21, color = "gray50",  stroke = 0.3) +
scale_fill_manual(values = alpha(c("#6FB7A7", "#ABD2CB", "#B8D28C",
"#EBD89F", "#EEC9AD", "#E4B888", "#E49A91",
"#EFAFAF", "#D8B2C4", "#BD98BD", "#C6C4D8", "#ADA8D9",
"#8DAAEE"),0.7)) +
xlab("") +
ylab("") +
theme_bw()
## Display map
map.color_T <- map.color_T +
theme(legend.position = "none")
map.color_T <-  map.color_T+
theme(legend.text = element_text(size = 8)
)+
guides(color = guide_legend(override.aes = list(size = 1.2), nrow = 3))
map.color_T <-  map.color_T + theme(axis.text.y = element_text(size = 8),
axis.title.y = element_blank()) +
theme(axis.text.x = element_text(size = 8))
# Create the barplot
bar_plot_T <- ggplot(aa) +
geom_bar(aes(x = n1, y = factor(Bat_species, levels = rev(levels(factor(Bat_species)))),
fill = Bat_species), colour = "black",
stat = "identity", alpha = 0.7, linewidth = 0.35,
position = position_dodge(width = 0.9))+
scale_fill_manual(values = c("#6FB7A7", "#ABD2CB", "#B8D28C",
"#EBD89F", "#EEC9AD", "#E4B888", "#E49A91",
"#EFAFAF", "#D8B2C4", "#BD98BD", "#C6C4D8", "#ADA8D9",
"#8DAAEE"))+
theme(text = element_text(family = "Source Code Pro"),
legend.text = element_text(size = 7),
legend.title = element_text(size = 9)) +
scale_x_discrete(labels = label_wrap(2)) + #,guide = guide_axis(n.dodge = 1.5))+
theme_bw() +
scale_x_continuous(breaks = seq(0, 54, by = 10))
bar_plot_T <- bar_plot_T + theme(legend.position = "none")+
guides(fill = "none")
bar_plot_T <-  bar_plot_T + theme(axis.text.y = element_text(size = 12, face = "bold.italic"),
axis.title.y = element_blank()) +
theme(axis.text.x = element_text(size = ))+
theme(plot.margin = unit(c(0.2, 0, 0.2, 2), 'lines'))+
labs(x ="n years")+
ggtitle("Temporal")+
theme(plot.title = element_text(size = 20, face = "bold"))
# Arrange the plots
arrange_ST <- ggarrange(bar_plot_S,   bar_plot_T,map.color_S, map.color_T,
nrow = 2, ncol = 2, labels = c("a", "b", "c", "d"), #common.legend = T, legend = "bottom",
align = "hv", widths = c(0.1,0.1) )+ theme(plot.background = element_rect(color = "black"))
arrange_ST
# ##Save the Figure
# ggsave('Figures/Figure_1.png', arrange_ST,
#        width = 330, height = 230, units = 'mm', dpi = 300, bg="white")
#
# ggsave('Figures/Figure_1.pdf', arrange_ST,
#        width = 330, height = 230, units = 'mm', dpi = 300, bg="white")
# From now on, the analysis is divided based on the dataset used:
# the "FAL dataset" and the "pairwise FAL-BM dataset"
#----------------------
## FAL dataset
#----------------------
## Extract the data from the raster stack at the coord. in the e_mf dataframe
e_mf <- read.csv("Data/Spatial/FAL_data.csv")
# From now on, the analysis is divided based on the dataset used:
# the "FAL dataset" and the "pairwise FAL-BM dataset"
#----------------------
## FAL dataset
#----------------------
## Extract the data from the raster stack at the coord. in the e_mf dataframe
e_mf <- read.csv("Data/Spatial/FAL_data.csv")
View(e_mf)
